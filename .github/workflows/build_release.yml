name: Build & Release Wogger (Self-Signed)

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # If you have other requirements, e.g. a requirements.txt, uncomment:
          # pip install -r requirements.txt

      - name: Build EXE using PyInstaller
        run: |
          pyinstaller --onefile --noconsole --icon=src/resources/wogger.ico --add-data "src/resources/*;resources" --clean main.py --name wogger

      - name: Generate Self-Signed Certificate (PowerShell)
        shell: powershell
        run: |
          # Create a self-signed certificate with some fake info
          $subject = "CN=Wogger Inc, O=Wogger Inc, L=Wogger Street 1, S=Woggster, C=WG"
          $cert = New-SelfSignedCertificate -CertStoreLocation Cert:\CurrentUser\My -Subject $subject -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1)
          $password = ConvertTo-SecureString -String "P@ssw0rd!" -Force -AsPlainText
          Export-PfxCertificate -Cert $cert -FilePath selfsigned.pfx -Password $password

      - name: Sign the EXE using Self-Signed Certificate
        shell: powershell
        run: |
          # If timestamping fails, remove /tr and /td parameters
          signtool sign `
            /f selfsigned.pfx `
            /p "P@ssw0rd!" `
            /fd SHA256 `
            /tr http://timestamp.digicert.com `
            /td SHA256 `
            dist\wogger.exe

      - name: Upload EXE as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wogger.exe
          path: dist\wogger.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built EXE
        uses: actions/download-artifact@v4
        with:
          name: wogger.exe
          path: dist

      - name: Generate Version Number
        id: version
        run: echo "VERSION=1.0.$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Generate Release Notes
        id: release_notes
        shell: bash
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            NOTES=$(git log -n 10 --pretty=format:"* %s")
          else
            NOTES=$(git log $LAST_TAG..HEAD --pretty=format:"* %s")
          fi
          echo "RELEASE_NOTES=$NOTES" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: |
            Wogger Inc proudly presents Wogger version ${{ env.VERSION }}.

            **Release Notes:**
            ${{ env.RELEASE_NOTES }}
          files: dist/wogger.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
